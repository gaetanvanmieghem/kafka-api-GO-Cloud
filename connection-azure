package main

import (
	"context"
	"database/sql"
	"fmt"
	"os"
	"os/signal"
	"strings"
	"syscall"

	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	_ "github.com/denisenkom/go-mssqldb"
	"github.com/confluentinc/confluent-kafka-go/kafka"
)

func main() {
	// Initialize Azure SQL Database connection
	connString := "server=<your_server>;user id=<your_user>;password=<your_password>;port=1433;database=<your_database>;encrypt=disable"  // replace values bteween <> with the correct values for your database 
	db, err := sql.Open("sqlserver", connString)
	if err != nil {
		fmt.Printf("Failed to open database connection: %s\n", err)
		os.Exit(1)
	}
	defer db.Close()

	// Initialize Kafka consumer
	consumer, err := kafka.NewConsumer(&kafka.ConfigMap{
		"bootstrap.servers":  "localhost:9092",  // replace with Kafka broker's address
		"group.id":           "my-group",
		"auto.offset.reset":  "earliest",
		"enable.auto.commit": "false",
	})
	if err != nil {
		fmt.Printf("Failed to create consumer: %s\n", err)
		os.Exit(1)
	}
	defer consumer.Close()

	// Subscribe to input topic
	err = consumer.SubscribeTopics([]string{"input-topic"}, nil) // replace with correct input topic
	if err != nil {
		fmt.Printf("Failed to subscribe to topic: %s\n", err)
		os.Exit(1)
	}

	// Trap SIGINT and SIGTERM to gracefully shutdown
	sigchan := make(chan os.Signal, 1)
	signal.Notify(sigchan, syscall.SIGINT, syscall.SIGTERM)

	// Process messages
	run := true
	for run == true {
		select {
		case sig := <-sigchan:
			fmt.Printf("Caught signal %v: terminating\n", sig)
			run = false

		default:
			msg, err := consumer.ReadMessage(-1)
			if err == nil {
				// Process message
				key := strings.ToUpper(string(msg.Key))
				value := strings.ToUpper(string(msg.Value))

				// Insert processed message into Azure SQL Database
				stmt, err := db.Prepare("INSERT INTO YourTable (KeyColumn, ValueColumn) VALUES (?, ?)")
				if err != nil {
					fmt.Printf("Failed to prepare SQL statement: %s\n", err)
				}
				defer stmt.Close()

				_, err = stmt.Exec(key, value)
				if err != nil {
					fmt.Printf("Failed to execute SQL statement: %s\n", err)
				}
			} else {
				fmt.Printf("Consumer error: %v (%v)\n", err, msg)
			}
		}
	}

	// Close consumer
	consumer.Close()
}
